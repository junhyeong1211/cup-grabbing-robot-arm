{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNUKMj/vcS659KFldHUExTV"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install gymnasium pybullet\n",
        "!pip install gymnasium pybullet stable-baselines3[extra]"
      ],
      "metadata": {
        "id": "iy79vb_cjdT0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import gymnasium as gym\n",
        "from gymnasium import spaces\n",
        "import numpy as np\n",
        "import pybullet as p\n",
        "import pybullet_data\n",
        "import time\n",
        "from stable_baselines3 import PPO\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import clear_output"
      ],
      "metadata": {
        "id": "2lxggi_2EYnO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CupGraspingEnv(gym.Env):\n",
        "    def __init__(self):\n",
        "        super(CupGraspingEnv, self).__init__()\n",
        "\n",
        "        self.client = p.connect(p.DIRECT)\n",
        "        p.setAdditionalSearchPath(pybullet_data.getDataPath())\n",
        "\n",
        "        # AXYZ 이동 + 그리퍼\n",
        "        action_bound = 0.1\n",
        "        self.action_space = spaces.Box(\n",
        "            low=np.array([-action_bound]*3 + [0]),\n",
        "            high=np.array([action_bound]*3 + [1]),\n",
        "            shape=(4,),\n",
        "            dtype=np.float32\n",
        "        )\n",
        "\n",
        "        # Observation Space : 그리퍼(3), 컵(3), 관절각도(9), 그리퍼 상태(1), 상대위치(3) -> 총 19차원\n",
        "        obs_dim = 3 + 3 + 9 + 1 + 3\n",
        "        obs_low = np.array([-np.inf] * obs_dim)\n",
        "        obs_high = np.array([np.inf] * obs_dim)\n",
        "        self.observation_space = spaces.Box(low=obs_low, high=obs_high, dtype=np.float32)\n",
        "\n",
        "        self.robotId = None\n",
        "        self.cupId = None\n",
        "        self.end_effector_index = 8 # Panda 로봇의 손목 바로 위 링크\n",
        "        self.gripper_indices = [9, 10] # Panda 로봇의 손가락 관절\n",
        "        self.distance_to_cup = 0\n",
        "        self.max_steps_per_episode = 500\n",
        "        self.step_counter = 0\n",
        "        print(\"맞춤형 Gym 환경이 [Panda Grasping 버전]으로 생성되었습니다!\")\n",
        "\n",
        "    def reset(self, seed=None, options=None):\n",
        "        self.step_counter = 0\n",
        "        p.resetSimulation(physicsClientId=self.client)\n",
        "        p.setGravity(0, 0, -9.8)\n",
        "\n",
        "        p.loadURDF(\"plane.urdf\")\n",
        "        self.robotId = p.loadURDF(\"franka_panda/panda.urdf\", [0, 0, 0], useFixedBase=True)\n",
        "\n",
        "        # 1. '커리큘럼 학습'을 위해 컵 위치를 고정\n",
        "        cup_start_pos = [0.5, 0.2, 0.05]\n",
        "        cup_visual_shape = p.createVisualShape(p.GEOM_CYLINDER, radius=0.04, length=0.1, rgbaColor=[0.8, 0.2, 0.2, 1])\n",
        "        cup_collision_shape = p.createCollisionShape(p.GEOM_CYLINDER, radius=0.04, height=0.1)\n",
        "        self.cupId = p.createMultiBody(baseMass=0.1, baseCollisionShapeIndex=cup_collision_shape, baseVisualShapeIndex=cup_visual_shape, basePosition=cup_start_pos)\n",
        "\n",
        "        # 마찰력을 설정\n",
        "        p.changeDynamics(self.cupId, -1, lateralFriction=1.0)\n",
        "        p.changeDynamics(self.robotId, self.gripper_indices[0], lateralFriction=1.0)\n",
        "        p.changeDynamics(self.robotId, self.gripper_indices[1], lateralFriction=1.0)\n",
        "\n",
        "        observation = self._get_obs()\n",
        "        self.distance_to_cup = np.linalg.norm(self.gripper_pos - self.cup_pos)\n",
        "\n",
        "        info = {}\n",
        "        return observation, info\n",
        "\n",
        "    def step(self, action):\n",
        "        # action 벡터를 이동과 잡기 부분으로 분리\n",
        "        move_action = action[:3]  # XYZ 이동량\n",
        "        grasp_action = action[3]   # 그리퍼 제어 (0~1 사이 값)\n",
        "\n",
        "        current_gripper_state = p.getLinkState(self.robotId, self.end_effector_index)\n",
        "        current_gripper_pos = np.array(current_gripper_state[0])\n",
        "        target_position = current_gripper_pos + move_action\n",
        "        target_joint_angles = p.calculateInverseKinematics(self.robotId, self.end_effector_index, target_position)\n",
        "\n",
        "        if target_joint_angles:\n",
        "            p.setJointMotorControlArray(\n",
        "                bodyIndex=self.robotId,\n",
        "                jointIndices=range(self.end_effector_index + 1), # 0~6번 팔 관절\n",
        "                controlMode=p.POSITION_CONTROL,\n",
        "                targetPositions=target_joint_angles[:self.end_effector_index + 1]\n",
        "            )\n",
        "\n",
        "        target_gripper_pos = 0.00 if grasp_action > 0.5 else 0.04\n",
        "        p.setJointMotorControlArray(\n",
        "            bodyIndex=self.robotId,\n",
        "            jointIndices=self.gripper_indices, # 그리퍼 관절만 제어\n",
        "            controlMode=p.POSITION_CONTROL,\n",
        "            targetPositions=[target_gripper_pos] * len(self.gripper_indices)\n",
        "        )\n",
        "\n",
        "        p.stepSimulation()\n",
        "\n",
        "        observation = self._get_obs()\n",
        "        reward = self._compute_reward()\n",
        "        terminated = self._check_done()\n",
        "        info = {}\n",
        "        return observation, reward, terminated, False, info\n",
        "\n",
        "    def _get_obs(self):\n",
        "        gripper_state = p.getLinkState(self.robotId, self.end_effector_index)\n",
        "        self.gripper_pos = np.array(gripper_state[0])\n",
        "\n",
        "        cup_pos, _ = p.getBasePositionAndOrientation(self.cupId)\n",
        "        self.cup_pos = np.array(cup_pos)\n",
        "\n",
        "        joint_states = p.getJointStates(self.robotId, range(p.getNumJoints(self.robotId)))\n",
        "\n",
        "        # Panda 로봇의 움직이는 관절 9개(팔 7 + 그리퍼 2)\n",
        "        joint_positions = [state[0] for state in joint_states][:9]\n",
        "        gripper_joint_state = p.getJointState(self.robotId, self.gripper_indices[0])\n",
        "        gripper_opening = np.array([gripper_joint_state[0]])\n",
        "        # 그리퍼에서 컵을 향하는 '상대 위치 벡터'를 계산하여 추가\n",
        "        relative_pos = self.cup_pos - self.gripper_pos\n",
        "        # 계산된 relative_pos를 observation에 포함\n",
        "        observation = np.concatenate([self.gripper_pos, self.cup_pos, joint_positions, gripper_opening, relative_pos])\n",
        "\n",
        "        return observation\n",
        "\n",
        "    def _compute_reward(self):\n",
        "        reward = 0\n",
        "        new_distance = np.linalg.norm(self.gripper_pos - self.cup_pos)\n",
        "\n",
        "        # 접근 보상\n",
        "        reward += (self.distance_to_cup - new_distance) * 100\n",
        "        self.distance_to_cup = new_distance\n",
        "\n",
        "        # 시간 페널티\n",
        "        reward -= 1\n",
        "\n",
        "        # 접촉 보상: 그리퍼와 컵이 실제로 접촉했는지 확인하고 추가 보상\n",
        "        contact_points = p.getContactPoints(bodyA=self.robotId, bodyB=self.cupId)\n",
        "        if len(contact_points) > 0:\n",
        "            print(\"컵과 접촉!\")\n",
        "            reward += 100 # 접촉 시 보너스 점수\n",
        "\n",
        "        gripper_joint_state = p.getJointState(self.robotId, self.gripper_indices[0])\n",
        "        is_gripper_closing = gripper_joint_state[0] < 0.01 # 그리퍼가 닫히는 중인지 확인\n",
        "        if is_gripper_closing:\n",
        "            print(\"잡기 시도!\")\n",
        "            reward += 200 # '좋은 시도'에 대한 추가 보너스\n",
        "\n",
        "        # 컵이 테이블에서 성공적으로 들어 올려졌는지 확인\n",
        "        cup_pos, _ = p.getBasePositionAndOrientation(self.cupId)\n",
        "        if cup_pos[2] > 0.05: # 컵의 Z좌표가 초기 높이(0.05)보다 높아졌다면\n",
        "            print(\"성공! 컵을 들어 올렸습니다!\")\n",
        "            reward += 5000\n",
        "\n",
        "        # 컵 넘어짐 페널티\n",
        "        _, cup_orn = p.getBasePositionAndOrientation(self.cupId)\n",
        "        cup_euler = p.getEulerFromQuaternion(cup_orn)\n",
        "        if abs(cup_euler[0]) > 0.5 or abs(cup_euler[1]) > 0.5:\n",
        "            reward -= 500\n",
        "\n",
        "        return reward\n",
        "\n",
        "    def _check_done(self):\n",
        "        cup_pos, cup_orn = p.getBasePositionAndOrientation(self.cupId)\n",
        "\n",
        "        if cup_pos[2] > 0.1:\n",
        "            return True\n",
        "\n",
        "        # 실패 또는 시간 초과 조건\n",
        "        cup_euler = p.getEulerFromQuaternion(cup_orn)\n",
        "        if abs(cup_euler[0]) > 0.5 or abs(cup_euler[1]) > 0.5:\n",
        "            return True\n",
        "\n",
        "        self.step_counter += 1\n",
        "        if self.step_counter > self.max_steps_per_episode:\n",
        "            return True\n",
        "\n",
        "        return False\n",
        "\n",
        "    def render(self):\n",
        "        view_matrix = p.computeViewMatrix(cameraEyePosition=[1,1,1], cameraTargetPosition=[0.5,0,0.5], cameraUpVector=[0,0,1])\n",
        "        proj_matrix = p.computeProjectionMatrixFOV(fov=60.0, aspect=1.0, nearVal=0.1, farVal=100.0)\n",
        "        (w, h, rgb, _, _) = p.getCameraImage(width=224, height=224, viewMatrix=view_matrix, projectionMatrix=proj_matrix)\n",
        "        return rgb\n",
        "\n",
        "    def close(self):\n",
        "        if self.client >= 0:\n",
        "            p.disconnect(self.client)\n",
        "            self.client = -1\n",
        "        print(\"PyBullet 시뮬레이션 연결이 종료되었습니다.\")"
      ],
      "metadata": {
        "id": "u_DbfCUuo7zt"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}